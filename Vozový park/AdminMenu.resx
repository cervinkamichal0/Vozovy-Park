<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="bObnovit.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        QmCC
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbW1stWlpaVVpaWjYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAF1dXTdaWlpVXV1dLAAAAAAAAAAAW1tbplpaWlhaWlrAWlpaT1paWlVaWlpjWlpaZlpa
        WmZaWlpjWlpaVVpaWk9aWlrAWlpaWFtbW6YAAAAAAAAAAFpaWsZbW1uRWlpaaVxcXE5aWlpdWFhYUVxc
        XE5cXFxOWFhYUVpaWl1ZWVlQWlpaaVtbW5FbW1vFAAAAAAAAAABbW1vYWFhYVFpaWnddXV0LWlpaYFxc
        XIhcXFyIXFxciFxcXIhcXFxnW1tbDltbW3hcXFxTW1tb1wAAAAAAAAAAW1tb3ltbWzVaWlp3XFxcllVV
        VQkAAAAAAAAAAAAAAAAAAAAAVVVVCVxcXJZaWlp3W1tbNVtbW90AAAAAAAAAAFtbW6NaWloiWlpaRF1d
        XRZaWlppXFxcmVxcXJlcXFyZXFxcmVtbW2hdXV0WWlpaRFpaWiJbW1ujAAAAAAAAAABcXFyWXFxcnltb
        W6lcXFyAXFxcZ1paWhFaWloRWlpaEVpaWhFbW1toWlpaf1xcXKpaWlqeW1tblAAAAAAAAAAAXV1dKVtb
        W6lbW1toXFxcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFpaWoJaWlpmXFxcql1dXSkAAAAAAAAAAFpa
        WjZaWlq+XFxc1lxcXJlcXFyZXFxcmVxcXJlcXFyZXFxcmVxcXJlcXFyZW1tb11tbW75aWlo2AAAAAAAA
        AABmZmYFVVVVIVtbW7RVVVUDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBABFtbW7RVVVUhZmZmBQAA
        AAAAAAAAAAAAAAAAAABcXFxOWlpakFlZWU1cXFw6WlpaM1paWjNcXFw6WVlZTVpaWpBcXFxLAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFxcXDJbW1taWlpacVpaWndaWlp3WlpacVtbW1pcXFwyAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAr/UAAJ/5AAC8PQAAt+0AALw9AACH8QAA1+sAAMAD
        AADv9wAA9+8AAP//AAD//wAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABaWloRW1tbq1tbW8xbW1vMWlpavVhY
        WDEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAWFhYMVpaWr1bW1vMW1tbzFxcXKpgYGAQAAAAAAAAAAAAAAAAAAAAAFxcXGRbW1vsXFxciFxc
        XIhbW1vQWlpaoQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABaWlqhW1tb0FxcXIhcXFyIW1tb7FpaWmMAAAAAAAAAAAAAAAAAAAAAWlpacVtb
        W9ZZWVkoW1tbUVxcXMRbW1vXWlpanltbW65bW1u+W1tbzVtbW91bW1vdW1tb3VtbW91bW1vdW1tb3Vtb
        W91bW1vdW1tbzVpaWr1bW1uuWlpanlpaWtdcXFzEW1tbUVlZWShbW1vWWlpacQAAAAAAAAAAAAAAAAAA
        AABaWlpxWlpa6ltbW/1bW1v2W1tb21xcXMNbW1uoXFxcmVxcXI5cXFyIWlpad1paWndaWlp3Wlpad1pa
        WndaWlp3Wlpad1paWndcXFyIW1tbj1xcXJlbW1uoXFxcw1tbW9tbW1v2W1tb/VxcXOpaWlpxAAAAAAAA
        AAAAAAAAAAAAAFxcXHVbW1v+WlpaW1VVVQNbW1s4AAAAAAAAAABaWloRWlpaRFpaWkRaWlpEWlpaRFpa
        WkRaWlpEWlpaRFpaWkRaWlpEWlpaRFpaWkRaWlpEWFhYGgAAAAAAAAAAW1tbOFVVVQNaWlpdW1tb/VlZ
        WXUAAAAAAAAAAAAAAAAAAAAAW1tbg1tbW/9cXFwnXFxccltbW+0AAAABAAAAAICAgAJbW1uKW1tb7ltb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb9FtbW6BmZmYKAAAAAICAgAJbW1vtXFxcb11d
        XSlbW1v/WlpagwAAAAAAAAAAAAAAAAAAAABbW1uSW1tb/2JiYg1bW1vHW1tbv1tbW1pcXFwvAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABaWlowWlpaW1xc
        XMBbW1vFVVVVD1tbW/9aWlqRAAAAAAAAAAAAAAAAAAAAAFpaWp5bW1v9AAAAAFpaWstbW1vuW1tb9ltb
        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
        W3NaWlpmW1tbXFpaWlVaWlpVW1tbXFpaWmZbW1tzW1tbgVtbW49bW1u0W1tb/VlZWU0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbW1tDW1tbmFtb
        W8dbW1vUW1tb4ltbW+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltbW+JbW1vUW1tbxltbW5ddXV1CAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////+H//4fg//8H7AAAN+AP8Afv///3zcADs8n/
        /5PIP/wTz///8+////fswAM36N/7F+m//ZfnP/zn8n/+T/j//x/gAAAH/f//v/7//3/+f/5//w/w//+A
        Af//////////////////////////////////////
</value>
  </data>
</root>